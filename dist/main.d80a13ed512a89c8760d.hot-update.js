"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatese_tailoring_framework"]("main",{

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_assessment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/assessment.js */ \"./js/components/assessment.js\");\n/* harmony import */ var _components_assessment_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_assessment_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_visualization_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/visualization.js */ \"./js/components/visualization.js\");\n/* harmony import */ var _components_visualization_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_visualization_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_recommendations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/recommendations.js */ \"./js/components/recommendations.js\");\n/* harmony import */ var _components_recommendations_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_components_recommendations_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_export_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/export.js */ \"./js/components/export.js\");\n/* harmony import */ var _components_export_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_components_export_js__WEBPACK_IMPORTED_MODULE_3__);\n/**\n * Main Application Controller for SE Process Tailoring Framework\n * Handles navigation, data loading, and view management\n */\n\n// Import component modules\n\n\n\n\n\nclass SEFrameworkApp {\n  constructor() {\n    this.currentView = \"welcome\";\n    this.assessmentData = {};\n    this.processData = {};\n    this.questionData = {};\n    this.dependencyData = {};\n    this.recommendations = {};\n    this.assessmentEngine = null;\n    this.visualizer = null;\n    this.recommendationEngine = null;\n    this.exportManager = null;\n\n    // Assessment state\n    this.assessmentResponses = {};\n    this.assessmentScores = {\n      complexity: 0,\n      safety: 0,\n      scale: 0,\n      maturity: 0,\n      overall: 0,\n    };\n\n    this.init();\n  }\n\n  async init() {\n    try {\n      console.log(\"=== SE Framework App Initialization Started ===\");\n      this.showLoading();\n\n      // Check if required components are loaded\n      console.log(\"Step 1: Checking component availability:\", {\n        AssessmentEngine: typeof AssessmentEngine,\n        ProcessNetworkVisualizer: typeof ProcessNetworkVisualizer,\n        RecommendationEngine: typeof RecommendationEngine,\n        ExportManager: typeof ExportManager,\n      });\n\n      console.log(\"Step 2: Loading data...\");\n      await this.loadData();\n      console.log(\"Step 3: Data loaded successfully\");\n\n      console.log(\"Step 4: Setting up event listeners...\");\n      this.setupEventListeners();\n      console.log(\"Step 5: Event listeners setup complete\");\n\n      console.log(\"Step 6: Rendering welcome view...\");\n      this.renderWelcomeView();\n      console.log(\"Step 7: Welcome view rendered\");\n\n      console.log(\"Step 8: About to hide loading overlay...\");\n      this.hideLoading();\n      console.log(\"Step 9: Loading overlay hidden\");\n\n      console.log(\"=== App Initialized Successfully ===\");\n    } catch (error) {\n      console.error(\"=== App Initialization Failed ===\", error);\n      console.error(\"Error details:\", error.stack);\n      this.showError(\n        `Failed to load application data: ${error.message}. Please refresh the page.`,\n      );\n      this.hideLoading();\n    }\n  }\n\n  async loadData() {\n    try {\n      console.log(\"Starting data loading...\");\n\n      // Load data files sequentially for better error handling\n      const processesResponse = await fetch(\"data/processes.json\");\n      console.log(\"Processes response status:\", processesResponse.status);\n      if (!processesResponse.ok) {\n        throw new Error(\"Failed to load processes data\");\n      }\n      const processes = await processesResponse.json();\n\n      const questionsResponse = await fetch(\"data/questions.json\");\n      console.log(\"Questions response status:\", questionsResponse.status);\n      if (!questionsResponse.ok) {\n        throw new Error(\"Failed to load questions data\");\n      }\n      const questions = await questionsResponse.json();\n\n      const dependenciesResponse = await fetch(\"data/dependencies.json\");\n      console.log(\"Dependencies response status:\", dependenciesResponse.status);\n      if (!dependenciesResponse.ok) {\n        throw new Error(\"Failed to load dependencies data\");\n      }\n      const dependencies = await dependenciesResponse.json();\n\n      console.log(\"Data loaded successfully:\", {\n        processes: processes.processes ? processes.processes.length : 0,\n        questions: questions.assessmentCategories\n          ? questions.assessmentCategories.length\n          : 0,\n        dependencies: dependencies.dependencies\n          ? dependencies.dependencies.length\n          : 0,\n      });\n\n      this.processData = processes;\n      this.questionData = questions;\n      this.dependencyData = dependencies;\n\n      console.log(\"Step 2.5: Checking component classes...\");\n      // Check if component classes are available\n      const componentCheck = {\n        AssessmentEngine: typeof AssessmentEngine,\n        ProcessNetworkVisualizer: typeof ProcessNetworkVisualizer,\n        RecommendationEngine: typeof RecommendationEngine,\n        ExportManager: typeof ExportManager,\n      };\n      console.log(\"Component availability:\", componentCheck);\n\n      if (typeof AssessmentEngine === \"undefined\") {\n        throw new Error(\"AssessmentEngine class not loaded\");\n      }\n      if (typeof ProcessNetworkVisualizer === \"undefined\") {\n        throw new Error(\"ProcessNetworkVisualizer class not loaded\");\n      }\n      if (typeof RecommendationEngine === \"undefined\") {\n        throw new Error(\"RecommendationEngine class not loaded\");\n      }\n      if (typeof ExportManager === \"undefined\") {\n        throw new Error(\"ExportManager class not loaded\");\n      }\n\n      console.log(\"Step 2.6: Initializing components...\");\n      // Initialize components\n      this.assessmentEngine = new AssessmentEngine(this.questionData, this);\n      console.log(\"AssessmentEngine created\");\n\n      this.visualizer = new ProcessNetworkVisualizer(\n        this.processData,\n        this.dependencyData,\n        this,\n      );\n      console.log(\"ProcessNetworkVisualizer created\");\n\n      this.recommendationEngine = new RecommendationEngine(\n        this.processData,\n        this.dependencyData,\n        this,\n      );\n      console.log(\"RecommendationEngine created\");\n\n      this.exportManager = new ExportManager(this);\n      console.log(\"ExportManager created\");\n\n      console.log(\"Step 2.7: All components initialized successfully\");\n    } catch (error) {\n      console.error(\"Error loading data:\", error);\n      throw error;\n    }\n  }\n\n  setupEventListeners() {\n    try {\n      // Navigation\n      const brandLink = document.getElementById(\"brand-link\");\n      if (brandLink) {\n        brandLink.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"welcome\");\n        });\n      }\n\n      const navWelcome = document.getElementById(\"nav-welcome\");\n      if (navWelcome) {\n        navWelcome.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"welcome\");\n        });\n      }\n\n      const navAssessment = document.getElementById(\"nav-assessment\");\n      if (navAssessment) {\n        navAssessment.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"assessment\");\n        });\n      }\n\n      const navVisualization = document.getElementById(\"nav-visualization\");\n      if (navVisualization) {\n        navVisualization.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"visualization\");\n        });\n      }\n\n      const navRecommendations = document.getElementById(\"nav-recommendations\");\n      if (navRecommendations) {\n        navRecommendations.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"recommendations\");\n        });\n      }\n\n      const navExport = document.getElementById(\"nav-export\");\n      if (navExport) {\n        navExport.addEventListener(\"click\", (e) => {\n          e.preventDefault();\n          this.showView(\"export\");\n        });\n      }\n\n      // Start assessment button\n      const startAssessmentBtn = document.getElementById(\n        \"start-assessment-btn\",\n      );\n      if (startAssessmentBtn) {\n        startAssessmentBtn.addEventListener(\"click\", () => {\n          this.showView(\"assessment\");\n        });\n      }\n    } catch (error) {\n      console.error(\"Error setting up event listeners:\", error);\n    }\n\n    // Keyboard navigation\n    document.addEventListener(\"keydown\", (e) => {\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key) {\n          case \"1\":\n            e.preventDefault();\n            this.showView(\"welcome\");\n            break;\n          case \"2\":\n            e.preventDefault();\n            this.showView(\"assessment\");\n            break;\n          case \"3\":\n            e.preventDefault();\n            this.showView(\"visualization\");\n            break;\n          case \"4\":\n            e.preventDefault();\n            this.showView(\"recommendations\");\n            break;\n          case \"5\":\n            e.preventDefault();\n            this.showView(\"export\");\n            break;\n        }\n      }\n    });\n  }\n\n  showView(viewName) {\n    console.log(`=== showView called with: ${viewName} ===`);\n    try {\n      console.log(`Step 1: Hiding all views...`);\n      // Hide all views\n      const allViews = document.querySelectorAll(\".view-container\");\n      console.log(`Found ${allViews.length} view containers`);\n      allViews.forEach((view) => {\n        view.style.display = \"none\";\n      });\n\n      console.log(`Step 2: Updating navigation...`);\n      // Update navigation\n      const allNavLinks = document.querySelectorAll(\".nav-link\");\n      console.log(`Found ${allNavLinks.length} nav links`);\n      allNavLinks.forEach((link) => {\n        link.classList.remove(\"active\");\n      });\n\n      console.log(`Step 3: Showing target view: ${viewName}-view`);\n      // Show selected view\n      const targetView = document.getElementById(`${viewName}-view`);\n      console.log(`Target view element:`, targetView);\n\n      if (targetView) {\n        targetView.style.display = \"block\";\n        console.log(`Step 3a: Target view displayed`);\n\n        // Activate corresponding nav link\n        const navLink = document.getElementById(`nav-${viewName}`);\n        console.log(`Nav link element:`, navLink);\n        if (navLink) {\n          navLink.classList.add(\"active\");\n          console.log(`Step 3b: Nav link activated`);\n        }\n\n        this.currentView = viewName;\n        console.log(`Step 3c: Current view set to ${viewName}`);\n\n        console.log(`Step 4: Initializing view-specific content...`);\n        // Initialize view-specific content\n        switch (viewName) {\n          case \"assessment\":\n            this.renderAssessmentView();\n            break;\n          case \"visualization\":\n            this.renderVisualizationView();\n            break;\n          case \"recommendations\":\n            this.renderRecommendationsView();\n            break;\n          case \"export\":\n            this.renderExportView();\n            break;\n        }\n        console.log(`Step 4a: View-specific content initialized`);\n\n        console.log(`Step 5: Updating progress indicator...`);\n        // Update progress indicator\n        this.updateProgressIndicator();\n        console.log(`Step 5a: Progress indicator updated`);\n\n        // Scroll to top\n        window.scrollTo(0, 0);\n        console.log(`Step 6: Scrolled to top`);\n\n        console.log(`=== View ${viewName} shown successfully ===`);\n      } else {\n        console.error(`View ${viewName} not found`);\n        console.error(\n          `Available views:`,\n          Array.from(document.querySelectorAll('[id$=\"-view\"]')).map(\n            (el) => el.id,\n          ),\n        );\n      }\n    } catch (error) {\n      console.error(`Error showing view ${viewName}:`, error);\n      console.error(`Error stack:`, error.stack);\n    }\n  }\n\n  renderWelcomeView() {\n    console.log(\"Rendering welcome view...\");\n    try {\n      // Welcome view is static HTML, just ensure it's visible\n      this.showView(\"welcome\");\n      console.log(\"Welcome view rendered successfully\");\n    } catch (error) {\n      console.error(\"Error rendering welcome view:\", error);\n      // Fallback: manually show welcome view\n      const welcomeView = document.getElementById(\"welcome-view\");\n      if (welcomeView) {\n        welcomeView.style.display = \"block\";\n      }\n    }\n  }\n\n  renderAssessmentView() {\n    if (this.assessmentEngine) {\n      this.assessmentEngine.render();\n      this.showProgressIndicator();\n    }\n  }\n\n  renderVisualizationView() {\n    if (this.visualizer) {\n      // Small delay to ensure container is visible before rendering\n      setTimeout(() => {\n        this.visualizer.render();\n      }, 100);\n    }\n  }\n\n  renderRecommendationsView() {\n    if (this.recommendationEngine) {\n      this.recommendationEngine.render();\n    }\n  }\n\n  renderExportView() {\n    if (this.exportManager) {\n      this.exportManager.render();\n    }\n  }\n\n  updateProgressIndicator() {\n    const progressContainer = document.getElementById(\"progress-container\");\n    const progressBar = document.getElementById(\"overall-progress\");\n    const progressText = document.getElementById(\"progress-text\");\n\n    if (this.currentView === \"welcome\") {\n      progressContainer.style.display = \"none\";\n      return;\n    }\n\n    // Calculate overall progress\n    let progress = 0;\n    switch (this.currentView) {\n      case \"assessment\":\n        progress = this.getAssessmentProgress();\n        break;\n      case \"visualization\":\n        progress = this.hasCompletedAssessment() ? 75 : 25;\n        break;\n      case \"recommendations\":\n        progress = this.hasCompletedAssessment() ? 90 : 50;\n        break;\n      case \"export\":\n        progress = 100;\n        break;\n    }\n\n    progressContainer.style.display = \"block\";\n    progressBar.style.width = `${progress}%`;\n    progressText.textContent = `${Math.round(progress)}%`;\n  }\n\n  showProgressIndicator() {\n    document.getElementById(\"progress-container\").style.display = \"block\";\n  }\n\n  hideProgressIndicator() {\n    document.getElementById(\"progress-container\").style.display = \"none\";\n  }\n\n  getAssessmentProgress() {\n    if (!this.assessmentEngine) return 0;\n\n    const totalQuestions = this.getTotalQuestions();\n    const answeredQuestions = Object.keys(this.assessmentResponses).length;\n\n    return totalQuestions > 0\n      ? Math.min((answeredQuestions / totalQuestions) * 60, 60)\n      : 0;\n  }\n\n  getTotalQuestions() {\n    if (!this.questionData.assessmentCategories) return 0;\n\n    return this.questionData.assessmentCategories.reduce((total, category) => {\n      return total + (category.questions ? category.questions.length : 0);\n    }, 0);\n  }\n\n  hasCompletedAssessment() {\n    const totalQuestions = this.getTotalQuestions();\n    const answeredQuestions = Object.keys(this.assessmentResponses).length;\n    return answeredQuestions >= totalQuestions && totalQuestions > 0;\n  }\n\n  updateAssessmentResponse(questionId, response) {\n    this.assessmentResponses[questionId] = response;\n    this.calculateScores();\n    this.updateProgressIndicator();\n\n    // Auto-save to localStorage\n    this.saveAssessmentState();\n  }\n\n  calculateScores() {\n    if (!this.questionData.assessmentCategories) return;\n\n    const dimensionScores = {\n      complexity: [],\n      safety: [],\n      scale: [],\n      maturity: [],\n    };\n\n    // Calculate dimension scores based on responses\n    this.questionData.assessmentCategories.forEach((category) => {\n      category.questions.forEach((question) => {\n        const response = this.assessmentResponses[question.id];\n        if (response && response.score !== undefined) {\n          const dimension = question.dimension;\n          if (dimensionScores[dimension]) {\n            dimensionScores[dimension].push({\n              score: response.score,\n              weight: question.weight || 1,\n            });\n          }\n        }\n      });\n    });\n\n    // Calculate weighted averages for each dimension\n    Object.keys(dimensionScores).forEach((dimension) => {\n      const scores = dimensionScores[dimension];\n      if (scores.length > 0) {\n        const weightedSum = scores.reduce(\n          (sum, item) => sum + item.score * item.weight,\n          0,\n        );\n        const totalWeight = scores.reduce((sum, item) => sum + item.weight, 0);\n        this.assessmentScores[dimension] =\n          totalWeight > 0 ? weightedSum / totalWeight : 0;\n      }\n    });\n\n    // Calculate overall score (weighted average of dimensions)\n    const dimensionWeights = {\n      complexity: 0.3,\n      safety: 0.25,\n      scale: 0.25,\n      maturity: 0.2,\n    };\n\n    let overallScore = 0;\n    let totalWeight = 0;\n\n    Object.keys(dimensionWeights).forEach((dimension) => {\n      if (this.assessmentScores[dimension] > 0) {\n        overallScore +=\n          this.assessmentScores[dimension] * dimensionWeights[dimension];\n        totalWeight += dimensionWeights[dimension];\n      }\n    });\n\n    this.assessmentScores.overall =\n      totalWeight > 0 ? overallScore / totalWeight : 0;\n\n    // Generate recommendations if assessment is complete\n    if (this.hasCompletedAssessment() && this.recommendationEngine) {\n      this.recommendations = this.recommendationEngine.generateRecommendations(\n        this.assessmentScores,\n      );\n    }\n  }\n\n  saveAssessmentState() {\n    const state = {\n      responses: this.assessmentResponses,\n      scores: this.assessmentScores,\n      recommendations: this.recommendations,\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(\"se-tailoring-assessment\", JSON.stringify(state));\n  }\n\n  loadAssessmentState() {\n    try {\n      const saved = localStorage.getItem(\"se-tailoring-assessment\");\n      if (saved) {\n        const state = JSON.parse(saved);\n\n        // Only load if saved within last 24 hours\n        const dayOld = 24 * 60 * 60 * 1000;\n        if (Date.now() - state.timestamp < dayOld) {\n          this.assessmentResponses = state.responses || {};\n          this.assessmentScores = state.scores || {};\n          this.recommendations = state.recommendations || {};\n          return true;\n        }\n      }\n    } catch (error) {\n      // Failed to load saved assessment state\n    }\n    return false;\n  }\n\n  clearAssessmentState() {\n    this.assessmentResponses = {};\n    this.assessmentScores = {\n      complexity: 0,\n      safety: 0,\n      scale: 0,\n      maturity: 0,\n      overall: 0,\n    };\n    this.recommendations = {};\n    localStorage.removeItem(\"se-tailoring-assessment\");\n    this.updateProgressIndicator();\n  }\n\n  showLoading() {\n    document.getElementById(\"loading-overlay\").style.display = \"flex\";\n  }\n\n  hideLoading() {\n    console.log(\"=== Hiding loading overlay ===\");\n    const loadingOverlay = document.getElementById(\"loading-overlay\");\n    console.log(\"Loading overlay element:\", loadingOverlay);\n\n    if (loadingOverlay) {\n      console.log(\"Current display style:\", loadingOverlay.style.display);\n      console.log(\n        \"Current computed style:\",\n        window.getComputedStyle(loadingOverlay).display,\n      );\n\n      // Try multiple approaches to hide it\n      loadingOverlay.style.display = \"none\";\n      loadingOverlay.style.visibility = \"hidden\";\n      loadingOverlay.style.opacity = \"0\";\n      loadingOverlay.style.pointerEvents = \"none\";\n\n      // Also add a class to ensure it stays hidden\n      loadingOverlay.classList.add(\"hidden\");\n\n      console.log(\"Loading overlay hidden with multiple methods\");\n      console.log(\"New display style:\", loadingOverlay.style.display);\n      console.log(\n        \"New computed style:\",\n        window.getComputedStyle(loadingOverlay).display,\n      );\n    } else {\n      console.warn(\"Loading overlay element not found\");\n      console.log(\n        \"Available elements with loading in ID:\",\n        Array.from(document.querySelectorAll('[id*=\"loading\"]')).map(\n          (el) => el.id,\n        ),\n      );\n    }\n    console.log(\"=== Loading overlay hide attempt complete ===\");\n  }\n\n  showError(message) {\n    console.error(\"Showing error:\", message);\n\n    // Create and show error alert\n    const alertHtml = `\n            <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                <i class=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                <strong>Error:</strong> ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n            </div>\n        `;\n\n    // Insert at top of main content\n    const mainContent = document.getElementById(\"main-content\");\n    if (mainContent) {\n      mainContent.insertAdjacentHTML(\"afterbegin\", alertHtml);\n\n      // Auto-remove after 10 seconds\n      setTimeout(() => {\n        const alert = mainContent.querySelector(\".alert-danger\");\n        if (alert) {\n          try {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n          } catch (e) {\n            // Fallback: just remove the element\n            alert.remove();\n          }\n        }\n      }, 10000);\n    } else {\n      console.error(\"Main content element not found for error display\");\n    }\n  }\n\n  showSuccess(message) {\n    // Create and show success alert\n    const alertHtml = `\n            <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n                <i class=\"bi bi-check-circle-fill me-2\"></i>\n                ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n            </div>\n        `;\n\n    // Insert at top of main content\n    const mainContent = document.getElementById(\"main-content\");\n    mainContent.insertAdjacentHTML(\"afterbegin\", alertHtml);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      const alert = mainContent.querySelector(\".alert-success\");\n      if (alert) {\n        const bsAlert = new bootstrap.Alert(alert);\n        bsAlert.close();\n      }\n    }, 5000);\n  }\n\n  // Utility methods\n  getProcessById(processId) {\n    return this.processData.processes?.find((p) => p.id === processId);\n  }\n\n  getDependenciesForProcess(processId) {\n    return (\n      this.dependencyData.dependencies?.filter((d) => d.source === processId) ||\n      []\n    );\n  }\n\n  getProcessesDependingOn(processId) {\n    return (\n      this.dependencyData.dependencies?.filter((d) => d.target === processId) ||\n      []\n    );\n  }\n\n  showProcessDetails(processId) {\n    const modal = document.getElementById('process-detail-modal');\n    const title = document.getElementById('process-modal-title');\n    const body = document.getElementById('process-modal-body');\n\n    if (!modal || !title || !body) {\n      console.error('Modal elements not found - check HTML structure');\n      return;\n    }\n\n    // Ensure modal is properly initialized in the DOM\n    if (!modal.classList.contains('modal')) {\n      console.error('Modal element is not properly initialized');\n      return;\n    }\n\n    const process = this.getProcessById(processId);\n    const recommendation = this.recommendations[processId];\n\n    if (!process) {\n      return;\n    }\n\n    const recommendedLevel = recommendation?.recommendedLevel || 'basic';\n    \n    title.textContent = process.name;\n\n    body.innerHTML = `\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <h6>Current Recommendation</h6>\n                    <span class=\"level-badge level-${recommendedLevel}\">${recommendedLevel}</span>\n                    <p class=\"mt-2 text-muted\">${process.description || 'No description available'}</p>\n                </div>\n                <div class=\"col-md-6\">\n                    <h6>Process Metrics</h6>\n                    <ul class=\"list-unstyled\">\n                        <li><strong>Effort:</strong> ${recommendation?.effort || 1}/5</li>\n                        <li><strong>Complexity:</strong> ${recommendation?.complexity || 1}/5</li>\n                        <li><strong>Confidence:</strong> ${Math.round((recommendation?.confidence || 0.8) * 100)}%</li>\n                        <li><strong>Category:</strong> ${this.processData.processCategories?.[process.category] || process.category}</li>\n                    </ul>\n                </div>\n            </div>\n\n            ${recommendation?.rationale ? `\n                <div class=\"mt-3\">\n                    <h6>Rationale</h6>\n                    <ul class=\"list-unstyled\">\n                        ${recommendation.rationale.map(reason => `<li class=\"text-muted\">• ${reason}</li>`).join('')}\n                    </ul>\n                </div>\n            ` : ''}\n\n            ${process?.tailoringLevels ? `\n                <div class=\"mt-3\">\n                    <h6>Available Tailoring Levels</h6>\n                    <div class=\"accordion\" id=\"levels-accordion\">\n                        ${Object.keys(process.tailoringLevels).map((level, index) => `\n                            <div class=\"accordion-item\">\n                                <h2 class=\"accordion-header\">\n                                    <button class=\"accordion-button ${level !== recommendedLevel ? 'collapsed' : ''}\" \n                                            type=\"button\" data-bs-toggle=\"collapse\" \n                                            data-bs-target=\"#level-${level}\">\n                                        <span class=\"level-badge level-${level} me-2\">${level}</span>\n                                        ${process.tailoringLevels[level].description}\n                                    </button>\n                                </h2>\n                                <div id=\"level-${level}\" \n                                     class=\"accordion-collapse collapse ${level === recommendedLevel ? 'show' : ''}\"\n                                     data-bs-parent=\"#levels-accordion\">\n                                    <div class=\"accordion-body\">\n                                        <p><strong>Activities:</strong></p>\n                                        <ul>\n                                            ${process.tailoringLevels[level].activities?.map(activity => `<li>${activity}</li>`).join('') || '<li>No activities specified</li>'}\n                                        </ul>\n                                        <p><strong>Key Outputs:</strong></p>\n                                        <ul>\n                                            ${process.tailoringLevels[level].outputs?.map(output => `<li>${output}</li>`).join('') || '<li>No outputs specified</li>'}\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            ` : ''}\n        `;\n\n    // Ensure Bootstrap is available\n    if (typeof bootstrap === 'undefined') {\n      console.error('Bootstrap not available');\n      return;\n    }\n\n    try {\n      const bsModal = new bootstrap.Modal(modal);\n      bsModal.show();\n      console.log('Modal shown successfully for process:', processId);\n      \n      // Debug: Check modal state after showing\n      setTimeout(() => {\n        console.log('=== MODAL DEBUG INFO ===');\n        console.log('Modal display:', modal.style.display);\n        console.log('Modal classes:', modal.className);\n        console.log('Modal visibility:', modal.offsetParent !== null);\n        \n        // Check if backdrop exists\n        const backdrops = document.querySelectorAll('.modal-backdrop');\n        console.log('Backdrops found:', backdrops.length);\n        \n        // Check z-index issues\n        console.log('Modal z-index:', modal.style.zIndex);\n        console.log('Modal computed z-index:', window.getComputedStyle(modal).zIndex);\n        \n        // Check if modal is actually visible\n        const rect = modal.getBoundingClientRect();\n        console.log('Modal position:', rect.top, rect.left, rect.width, rect.height);\n        console.log('Modal in viewport:', rect.top >= 0 && rect.left >= 0 && \n          rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && \n          rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n        \n        // Check if any parent elements are hidden\n        let current = modal;\n        const hiddenParents = [];\n        while (current.parentElement) {\n          current = current.parentElement;\n          const style = window.getComputedStyle(current);\n          if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0') {\n            hiddenParents.push(current);\n          }\n        }\n        console.log('Hidden parents:', hiddenParents.length, hiddenParents);\n        \n        // Force modal to be visible if hidden - check all possible hiding conditions\n        const computedStyle = window.getComputedStyle(modal);\n        if (modal.offsetParent === null || \n            rect.width === 0 || \n            rect.height === 0 ||\n            computedStyle.display === 'none' ||\n            computedStyle.visibility === 'hidden' ||\n            computedStyle.opacity === '0') {\n          \n          console.log('Modal appears hidden - forcing visibility');\n          \n          // Remove from DOM and re-append to ensure proper positioning\n          const parent = modal.parentElement;\n          parent.removeChild(modal);\n          document.body.appendChild(modal);\n          \n          // Force visible styles\n          modal.style.display = 'block';\n          modal.style.visibility = 'visible';\n          modal.style.opacity = '1';\n          modal.style.zIndex = '1050';\n          modal.style.position = 'fixed';\n          modal.style.top = '50%';\n          modal.style.left = '50%';\n          modal.style.transform = 'translate(-50%, -50%)';\n          \n          // Ensure backdrop is properly positioned\n          const backdrops = document.querySelectorAll('.modal-backdrop');\n          backdrops.forEach(backdrop => {\n            backdrop.style.zIndex = '1040';\n          });\n        }\n        \n        console.log('=== END DEBUG ===');\n      }, 100);\n      \n    } catch (error) {\n      console.error('Failed to show modal:', error);\n      // Fallback: manually show the modal if Bootstrap fails\n      modal.style.display = 'block';\n      modal.classList.add('show');\n      document.body.classList.add('modal-open');\n      \n      // Create backdrop manually\n      const backdrop = document.createElement('div');\n      backdrop.className = 'modal-backdrop fade show';\n      backdrop.style.zIndex = '1040';\n      document.body.appendChild(backdrop);\n      \n      // Ensure modal has proper z-index\n      modal.style.zIndex = '1050';\n    }\n  }\n\n  // Public API for components\n  getAssessmentData() {\n    return {\n      responses: this.assessmentResponses,\n      scores: this.assessmentScores,\n      recommendations: this.recommendations,\n    };\n  }\n\n  getProcessData() {\n    return this.processData;\n  }\n\n  getDependencyData() {\n    return this.dependencyData;\n  }\n}\n\n// Initialize application when DOM is loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"DOM loaded, initializing app...\");\n\n  // Failsafe: Hide loading screen after 10 seconds regardless of what happens\n  const failsafeTimeout = setTimeout(() => {\n    console.warn(\"Failsafe timeout reached - hiding loading screen\");\n    forceHideLoadingOverlay();\n  }, 10000);\n\n  // Wait a bit to ensure all scripts are loaded\n  setTimeout(() => {\n    try {\n      // Check if all required components are available\n      const requiredComponents = [\n        \"AssessmentEngine\",\n        \"ProcessNetworkVisualizer\",\n        \"RecommendationEngine\",\n        \"ExportManager\",\n      ];\n\n      const missingComponents = requiredComponents.filter(\n        (comp) => typeof window[comp] === \"undefined\",\n      );\n\n      if (missingComponents.length > 0) {\n        console.error(\"Missing components:\", missingComponents);\n        throw new Error(\n          `Required components not loaded: ${missingComponents.join(\", \")}`,\n        );\n      }\n\n      console.log(\"All components available, initializing app...\");\n      window.seApp = new SEFrameworkApp();\n\n      // Clear failsafe timeout if app initializes successfully\n      clearTimeout(failsafeTimeout);\n\n      // Additional failsafe: Force hide loading overlay after successful initialization\n      setTimeout(() => {\n        console.log(\"Additional failsafe: Forcing loading overlay to hide\");\n        forceHideLoadingOverlay();\n      }, 1000);\n    } catch (error) {\n      console.error(\"Failed to initialize app:\", error);\n\n      // Clear failsafe timeout since we're handling the error\n      clearTimeout(failsafeTimeout);\n\n      // Show error to user\n      const loadingOverlay = document.getElementById(\"loading-overlay\");\n      if (loadingOverlay) {\n        loadingOverlay.innerHTML = `\n                    <div class=\"text-center text-white\">\n                        <div class=\"spinner-border mb-3\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <p class=\"text-danger\">Failed to initialize application</p>\n                        <p class=\"small\">${error.message}</p>\n                        <button class=\"btn btn-outline-light\" onclick=\"window.location.reload()\">Retry</button>\n                    </div>\n                `;\n      }\n    }\n  }, 100); // Small delay to ensure scripts are loaded\n});\n\n// Aggressive function to hide loading overlay\nfunction forceHideLoadingOverlay() {\n  console.log(\"=== Force hiding loading overlay ===\");\n\n  // Try multiple selectors\n  const selectors = [\n    \"#loading-overlay\",\n    \".loading-overlay\",\n    '[id*=\"loading\"]',\n    \".position-fixed.top-0.start-0.w-100.h-100\",\n  ];\n\n  selectors.forEach((selector) => {\n    try {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach((element) => {\n        console.log(`Hiding element with selector: ${selector}`);\n        element.style.display = \"none\";\n        element.style.visibility = \"hidden\";\n        element.style.opacity = \"0\";\n        element.style.pointerEvents = \"none\";\n        element.classList.add(\"hidden\");\n        element.setAttribute(\"hidden\", \"\");\n      });\n    } catch (error) {\n      console.warn(`Error hiding elements with selector ${selector}:`, error);\n    }\n  });\n\n  // Also try to remove the loading overlay completely\n  try {\n    const loadingOverlay = document.getElementById(\"loading-overlay\");\n    if (loadingOverlay && loadingOverlay.parentNode) {\n      console.log(\"Removing loading overlay from DOM\");\n      loadingOverlay.parentNode.removeChild(loadingOverlay);\n    }\n  } catch (error) {\n    console.warn(\"Error removing loading overlay from DOM:\", error);\n  }\n\n  console.log(\"=== Force hide complete ===\");\n}\n\n// Handle browser back/forward buttons\nwindow.addEventListener(\"popstate\", (event) => {\n  if (window.seApp && event.state) {\n    window.seApp.showView(event.state.view);\n  }\n});\n\n// Export for global access\nwindow.SEFrameworkApp = SEFrameworkApp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/app.js\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("2261d810ae9b05e98599")
/******/ })();
/******/ 
/******/ }
);